// Code generated by MockGen. DO NOT EDIT.
// Source: internal/reservedipv6/reserved_ipv6.go
//
// Generated by this command:
//
//	mockgen -typed -source=internal/reservedipv6/reserved_ipv6.go -package=reservedipv6 -destination=internal/reservedipv6/mocks.go
//
// Package reservedipv6 is a generated GoMock package.
package reservedipv6

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Assign mocks base method.
func (m *MockManager) Assign(ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Assign", ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// Assign indicates an expected call of Assign.
func (mr *MockManagerMockRecorder) Assign(ip any) *ManagerAssignCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assign", reflect.TypeOf((*MockManager)(nil).Assign), ip)
	return &ManagerAssignCall{Call: call}
}

// ManagerAssignCall wrap *gomock.Call
type ManagerAssignCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ManagerAssignCall) Return(arg0 error) *ManagerAssignCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ManagerAssignCall) Do(f func(string) error) *ManagerAssignCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ManagerAssignCall) DoAndReturn(f func(string) error) *ManagerAssignCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unassign mocks base method.
func (m *MockManager) Unassign() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unassign")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unassign indicates an expected call of Unassign.
func (mr *MockManagerMockRecorder) Unassign() *ManagerUnassignCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unassign", reflect.TypeOf((*MockManager)(nil).Unassign))
	return &ManagerUnassignCall{Call: call}
}

// ManagerUnassignCall wrap *gomock.Call
type ManagerUnassignCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ManagerUnassignCall) Return(arg0 error) *ManagerUnassignCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ManagerUnassignCall) Do(f func() error) *ManagerUnassignCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ManagerUnassignCall) DoAndReturn(f func() error) *ManagerUnassignCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
