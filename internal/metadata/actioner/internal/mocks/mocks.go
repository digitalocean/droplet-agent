// Code generated by MockGen. DO NOT EDIT.
// Source: internal/metadata/actioner/do_managed_keys_actioner.go
//
// Generated by this command:
//
//	mockgen -source=internal/metadata/actioner/do_managed_keys_actioner.go -package=mocks -destination=internal/metadata/actioner/internal/mocks/mocks.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	sysaccess "github.com/digitalocean/droplet-agent/internal/sysaccess"
	gomock "go.uber.org/mock/gomock"
)

// MocksshManager is a mock of sshManager interface.
type MocksshManager struct {
	ctrl     *gomock.Controller
	recorder *MocksshManagerMockRecorder
	isgomock struct{}
}

// MocksshManagerMockRecorder is the mock recorder for MocksshManager.
type MocksshManagerMockRecorder struct {
	mock *MocksshManager
}

// NewMocksshManager creates a new mock instance.
func NewMocksshManager(ctrl *gomock.Controller) *MocksshManager {
	mock := &MocksshManager{ctrl: ctrl}
	mock.recorder = &MocksshManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksshManager) EXPECT() *MocksshManagerMockRecorder {
	return m.recorder
}

// DisableManagedDropletKeys mocks base method.
func (m *MocksshManager) DisableManagedDropletKeys() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DisableManagedDropletKeys")
}

// DisableManagedDropletKeys indicates an expected call of DisableManagedDropletKeys.
func (mr *MocksshManagerMockRecorder) DisableManagedDropletKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableManagedDropletKeys", reflect.TypeOf((*MocksshManager)(nil).DisableManagedDropletKeys))
}

// EnableManagedDropletKeys mocks base method.
func (m *MocksshManager) EnableManagedDropletKeys() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableManagedDropletKeys")
}

// EnableManagedDropletKeys indicates an expected call of EnableManagedDropletKeys.
func (mr *MocksshManagerMockRecorder) EnableManagedDropletKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableManagedDropletKeys", reflect.TypeOf((*MocksshManager)(nil).EnableManagedDropletKeys))
}

// RemoveDOTTYKeys mocks base method.
func (m *MocksshManager) RemoveDOTTYKeys() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDOTTYKeys")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDOTTYKeys indicates an expected call of RemoveDOTTYKeys.
func (mr *MocksshManagerMockRecorder) RemoveDOTTYKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDOTTYKeys", reflect.TypeOf((*MocksshManager)(nil).RemoveDOTTYKeys))
}

// UpdateKeys mocks base method.
func (m *MocksshManager) UpdateKeys(keys []*sysaccess.SSHKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeys", keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateKeys indicates an expected call of UpdateKeys.
func (mr *MocksshManagerMockRecorder) UpdateKeys(keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeys", reflect.TypeOf((*MocksshManager)(nil).UpdateKeys), keys)
}

// MocksshKeyParser is a mock of sshKeyParser interface.
type MocksshKeyParser struct {
	ctrl     *gomock.Controller
	recorder *MocksshKeyParserMockRecorder
	isgomock struct{}
}

// MocksshKeyParserMockRecorder is the mock recorder for MocksshKeyParser.
type MocksshKeyParserMockRecorder struct {
	mock *MocksshKeyParser
}

// NewMocksshKeyParser creates a new mock instance.
func NewMocksshKeyParser(ctrl *gomock.Controller) *MocksshKeyParser {
	mock := &MocksshKeyParser{ctrl: ctrl}
	mock.recorder = &MocksshKeyParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksshKeyParser) EXPECT() *MocksshKeyParserMockRecorder {
	return m.recorder
}

// FromDOTTYKey mocks base method.
func (m *MocksshKeyParser) FromDOTTYKey(key string) (*sysaccess.SSHKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromDOTTYKey", key)
	ret0, _ := ret[0].(*sysaccess.SSHKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromDOTTYKey indicates an expected call of FromDOTTYKey.
func (mr *MocksshKeyParserMockRecorder) FromDOTTYKey(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromDOTTYKey", reflect.TypeOf((*MocksshKeyParser)(nil).FromDOTTYKey), key)
}

// FromPublicKey mocks base method.
func (m *MocksshKeyParser) FromPublicKey(key string) (*sysaccess.SSHKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromPublicKey", key)
	ret0, _ := ret[0].(*sysaccess.SSHKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromPublicKey indicates an expected call of FromPublicKey.
func (mr *MocksshKeyParserMockRecorder) FromPublicKey(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromPublicKey", reflect.TypeOf((*MocksshKeyParser)(nil).FromPublicKey), key)
}
