// Code generated by MockGen. DO NOT EDIT.
// Source: internal/troubleshooting/parser/parser.go
//
// Generated by this command:
//
//	mockgen -source=internal/troubleshooting/parser/parser.go -package=mocks -destination=internal/troubleshooting/mocks/parser_mocks.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	parser "github.com/digitalocean/droplet-agent/internal/troubleshooting/parser"
	gomock "go.uber.org/mock/gomock"
)

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
	isgomock struct{}
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// DetectedFormat mocks base method.
func (m *MockParser) DetectedFormat() (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectedFormat")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// DetectedFormat indicates an expected call of DetectedFormat.
func (mr *MockParserMockRecorder) DetectedFormat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectedFormat", reflect.TypeOf((*MockParser)(nil).DetectedFormat))
}

// ParseLine mocks base method.
func (m *MockParser) ParseLine(line string) parser.LogEntry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseLine", line)
	ret0, _ := ret[0].(parser.LogEntry)
	return ret0
}

// ParseLine indicates an expected call of ParseLine.
func (mr *MockParserMockRecorder) ParseLine(line any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseLine", reflect.TypeOf((*MockParser)(nil).ParseLine), line)
}

// Reset mocks base method.
func (m *MockParser) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockParserMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockParser)(nil).Reset))
}
