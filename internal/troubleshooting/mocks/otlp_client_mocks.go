// Code generated by MockGen. DO NOT EDIT.
// Source: internal/troubleshooting/otlp/client.go
//
// Generated by this command:
//
//	mockgen -source=internal/troubleshooting/otlp/client.go -package=mocks -destination=internal/troubleshooting/mocks/otlp_client_mocks.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	parser "github.com/digitalocean/droplet-agent/internal/troubleshooting/parser"
	gomock "go.uber.org/mock/gomock"
)

// MockEmitter is a mock of Emitter interface.
type MockEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockEmitterMockRecorder
	isgomock struct{}
}

// MockEmitterMockRecorder is the mock recorder for MockEmitter.
type MockEmitterMockRecorder struct {
	mock *MockEmitter
}

// NewMockEmitter creates a new mock instance.
func NewMockEmitter(ctrl *gomock.Controller) *MockEmitter {
	mock := &MockEmitter{ctrl: ctrl}
	mock.recorder = &MockEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmitter) EXPECT() *MockEmitterMockRecorder {
	return m.recorder
}

// EmitError mocks base method.
func (m *MockEmitter) EmitError(ctx context.Context, sourceComponent, msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitError", ctx, sourceComponent, msg)
}

// EmitError indicates an expected call of EmitError.
func (mr *MockEmitterMockRecorder) EmitError(ctx, sourceComponent, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitError", reflect.TypeOf((*MockEmitter)(nil).EmitError), ctx, sourceComponent, msg)
}

// EmitLog mocks base method.
func (m *MockEmitter) EmitLog(ctx context.Context, sourceFile string, entry parser.LogEntry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitLog", ctx, sourceFile, entry)
}

// EmitLog indicates an expected call of EmitLog.
func (mr *MockEmitterMockRecorder) EmitLog(ctx, sourceFile, entry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitLog", reflect.TypeOf((*MockEmitter)(nil).EmitLog), ctx, sourceFile, entry)
}

// Flush mocks base method.
func (m *MockEmitter) Flush(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockEmitterMockRecorder) Flush(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockEmitter)(nil).Flush), ctx)
}
