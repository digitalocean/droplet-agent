// Code generated by MockGen. DO NOT EDIT.
// Source: internal/troubleshooting/file/file.go
//
// Generated by this command:
//
//	mockgen -source=internal/troubleshooting/file/file.go -package=mocks -destination=internal/troubleshooting/mocks/file_mocks.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
	isgomock struct{}
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// Tail mocks base method.
func (m *MockFile) Tail(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tail indicates an expected call of Tail.
func (mr *MockFileMockRecorder) Tail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tail", reflect.TypeOf((*MockFile)(nil).Tail), arg0)
}
