// Code generated by MockGen. DO NOT EDIT.
// Source: internal/sysutil/os_operations_helper.go
//
// Generated by this command:
//
//	mockgen -source=internal/sysutil/os_operations_helper.go -package=sysutil -destination=internal/sysutil/os_operations_helper_mocks.go
//

// Package sysutil is a generated GoMock package.
package sysutil

import (
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockosOpHelper is a mock of osOpHelper interface.
type MockosOpHelper struct {
	ctrl     *gomock.Controller
	recorder *MockosOpHelperMockRecorder
	isgomock struct{}
}

// MockosOpHelperMockRecorder is the mock recorder for MockosOpHelper.
type MockosOpHelperMockRecorder struct {
	mock *MockosOpHelper
}

// NewMockosOpHelper creates a new mock instance.
func NewMockosOpHelper(ctrl *gomock.Controller) *MockosOpHelper {
	mock := &MockosOpHelper{ctrl: ctrl}
	mock.recorder = &MockosOpHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockosOpHelper) EXPECT() *MockosOpHelperMockRecorder {
	return m.recorder
}

// Chown mocks base method.
func (m *MockosOpHelper) Chown(name string, uid, gid uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chown", name, uid, gid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chown indicates an expected call of Chown.
func (mr *MockosOpHelperMockRecorder) Chown(name, uid, gid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chown", reflect.TypeOf((*MockosOpHelper)(nil).Chown), name, uid, gid)
}

// CreateTemp mocks base method.
func (m *MockosOpHelper) CreateTemp(dir, pattern string) (File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemp", dir, pattern)
	ret0, _ := ret[0].(File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemp indicates an expected call of CreateTemp.
func (mr *MockosOpHelperMockRecorder) CreateTemp(dir, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemp", reflect.TypeOf((*MockosOpHelper)(nil).CreateTemp), dir, pattern)
}

// MkDir mocks base method.
func (m *MockosOpHelper) MkDir(path string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkDir", path, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkDir indicates an expected call of MkDir.
func (mr *MockosOpHelperMockRecorder) MkDir(path, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkDir", reflect.TypeOf((*MockosOpHelper)(nil).MkDir), path, perm)
}

// ReadFile mocks base method.
func (m *MockosOpHelper) ReadFile(filename string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", filename)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockosOpHelperMockRecorder) ReadFile(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockosOpHelper)(nil).ReadFile), filename)
}

// Remove mocks base method.
func (m *MockosOpHelper) Remove(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockosOpHelperMockRecorder) Remove(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockosOpHelper)(nil).Remove), name)
}

// Stat mocks base method.
func (m *MockosOpHelper) Stat(name string) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", name)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockosOpHelperMockRecorder) Stat(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockosOpHelper)(nil).Stat), name)
}
