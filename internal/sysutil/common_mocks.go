// Code generated by MockGen. DO NOT EDIT.
// Source: internal/sysutil/common.go
//
// Generated by this command:
//
//	mockgen -source=internal/sysutil/common.go -package=sysutil -destination=internal/sysutil/common_mocks.go
//

// Package sysutil is a generated GoMock package.
package sysutil

import (
	io "io"
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFile) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFileMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFile)(nil).Close))
}

// Name mocks base method.
func (m *MockFile) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFileMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFile)(nil).Name))
}

// Stat mocks base method.
func (m *MockFile) Stat() (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockFileMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockFile)(nil).Stat))
}

// MockosOperator is a mock of osOperator interface.
type MockosOperator struct {
	ctrl     *gomock.Controller
	recorder *MockosOperatorMockRecorder
}

// MockosOperatorMockRecorder is the mock recorder for MockosOperator.
type MockosOperatorMockRecorder struct {
	mock *MockosOperator
}

// NewMockosOperator creates a new mock instance.
func NewMockosOperator(ctrl *gomock.Controller) *MockosOperator {
	mock := &MockosOperator{ctrl: ctrl}
	mock.recorder = &MockosOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockosOperator) EXPECT() *MockosOperatorMockRecorder {
	return m.recorder
}

// createFileForWrite mocks base method.
func (m *MockosOperator) createFileForWrite(file string, user *User, perm os.FileMode) (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createFileForWrite", file, user, perm)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createFileForWrite indicates an expected call of createFileForWrite.
func (mr *MockosOperatorMockRecorder) createFileForWrite(file, user, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createFileForWrite", reflect.TypeOf((*MockosOperator)(nil).createFileForWrite), file, user, perm)
}

// getpwnam mocks base method.
func (m *MockosOperator) getpwnam(username string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getpwnam", username)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getpwnam indicates an expected call of getpwnam.
func (mr *MockosOperatorMockRecorder) getpwnam(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getpwnam", reflect.TypeOf((*MockosOperator)(nil).getpwnam), username)
}

// mkdir mocks base method.
func (m *MockosOperator) mkdir(dir string, user *User, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "mkdir", dir, user, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// mkdir indicates an expected call of mkdir.
func (mr *MockosOperatorMockRecorder) mkdir(dir, user, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mkdir", reflect.TypeOf((*MockosOperator)(nil).mkdir), dir, user, perm)
}
