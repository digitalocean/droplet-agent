// Code generated by MockGen. DO NOT EDIT.
// Source: internal/sysutil/common.go
//
// Generated by this command:
//
//	mockgen -source=internal/sysutil/common.go -package=sysutil -destination=internal/sysutil/common_mocks.go
//

// Package sysutil is a generated GoMock package.
package sysutil

import (
	bytes "bytes"
	io "io"
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
	isgomock struct{}
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFile) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFileMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFile)(nil).Close))
}

// Name mocks base method.
func (m *MockFile) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockFileMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFile)(nil).Name))
}

// Read mocks base method.
func (m *MockFile) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockFileMockRecorder) Read(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFile)(nil).Read), p)
}

// Stat mocks base method.
func (m *MockFile) Stat() (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockFileMockRecorder) Stat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockFile)(nil).Stat))
}

// Write mocks base method.
func (m *MockFile) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockFileMockRecorder) Write(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockFile)(nil).Write), p)
}

// MockosOperator is a mock of osOperator interface.
type MockosOperator struct {
	ctrl     *gomock.Controller
	recorder *MockosOperatorMockRecorder
	isgomock struct{}
}

// MockosOperatorMockRecorder is the mock recorder for MockosOperator.
type MockosOperatorMockRecorder struct {
	mock *MockosOperator
}

// NewMockosOperator creates a new mock instance.
func NewMockosOperator(ctrl *gomock.Controller) *MockosOperator {
	mock := &MockosOperator{ctrl: ctrl}
	mock.recorder = &MockosOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockosOperator) EXPECT() *MockosOperatorMockRecorder {
	return m.recorder
}

// command mocks base method.
func (m *MockosOperator) command(name string, args ...string) cmd {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "command", varargs...)
	ret0, _ := ret[0].(cmd)
	return ret0
}

// command indicates an expected call of command.
func (mr *MockosOperatorMockRecorder) command(name any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "command", reflect.TypeOf((*MockosOperator)(nil).command), varargs...)
}

// createTempFile mocks base method.
func (m *MockosOperator) createTempFile(dir, pattern string, user *User) (File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createTempFile", dir, pattern, user)
	ret0, _ := ret[0].(File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createTempFile indicates an expected call of createTempFile.
func (mr *MockosOperatorMockRecorder) createTempFile(dir, pattern, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createTempFile", reflect.TypeOf((*MockosOperator)(nil).createTempFile), dir, pattern, user)
}

// dir mocks base method.
func (m *MockosOperator) dir(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dir", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// dir indicates an expected call of dir.
func (mr *MockosOperatorMockRecorder) dir(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dir", reflect.TypeOf((*MockosOperator)(nil).dir), path)
}

// evalSymLinks mocks base method.
func (m *MockosOperator) evalSymLinks(path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "evalSymLinks", path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// evalSymLinks indicates an expected call of evalSymLinks.
func (mr *MockosOperatorMockRecorder) evalSymLinks(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "evalSymLinks", reflect.TypeOf((*MockosOperator)(nil).evalSymLinks), path)
}

// executable mocks base method.
func (m *MockosOperator) executable() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "executable")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// executable indicates an expected call of executable.
func (mr *MockosOperatorMockRecorder) executable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "executable", reflect.TypeOf((*MockosOperator)(nil).executable))
}

// getpwnam mocks base method.
func (m *MockosOperator) getpwnam(username string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getpwnam", username)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getpwnam indicates an expected call of getpwnam.
func (mr *MockosOperatorMockRecorder) getpwnam(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getpwnam", reflect.TypeOf((*MockosOperator)(nil).getpwnam), username)
}

// mkdir mocks base method.
func (m *MockosOperator) mkdir(dir string, user *User, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "mkdir", dir, user, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// mkdir indicates an expected call of mkdir.
func (mr *MockosOperatorMockRecorder) mkdir(dir, user, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mkdir", reflect.TypeOf((*MockosOperator)(nil).mkdir), dir, user, perm)
}

// newBuffer mocks base method.
func (m *MockosOperator) newBuffer() bytes.Buffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "newBuffer")
	ret0, _ := ret[0].(bytes.Buffer)
	return ret0
}

// newBuffer indicates an expected call of newBuffer.
func (mr *MockosOperatorMockRecorder) newBuffer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "newBuffer", reflect.TypeOf((*MockosOperator)(nil).newBuffer))
}

// newStringReader mocks base method.
func (m *MockosOperator) newStringReader(contents string) io.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "newStringReader", contents)
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// newStringReader indicates an expected call of newStringReader.
func (mr *MockosOperatorMockRecorder) newStringReader(contents any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "newStringReader", reflect.TypeOf((*MockosOperator)(nil).newStringReader), contents)
}

// openFile mocks base method.
func (m *MockosOperator) openFile(name string, flag int, perm os.FileMode) (File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "openFile", name, flag, perm)
	ret0, _ := ret[0].(File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// openFile indicates an expected call of openFile.
func (mr *MockosOperatorMockRecorder) openFile(name, flag, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "openFile", reflect.TypeOf((*MockosOperator)(nil).openFile), name, flag, perm)
}

// Mockcmd is a mock of cmd interface.
type Mockcmd struct {
	ctrl     *gomock.Controller
	recorder *MockcmdMockRecorder
	isgomock struct{}
}

// MockcmdMockRecorder is the mock recorder for Mockcmd.
type MockcmdMockRecorder struct {
	mock *Mockcmd
}

// NewMockcmd creates a new mock instance.
func NewMockcmd(ctrl *gomock.Controller) *Mockcmd {
	mock := &Mockcmd{ctrl: ctrl}
	mock.recorder = &MockcmdMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcmd) EXPECT() *MockcmdMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *Mockcmd) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockcmdMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*Mockcmd)(nil).Run))
}

// SetDir mocks base method.
func (m *Mockcmd) SetDir(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDir", arg0)
}

// SetDir indicates an expected call of SetDir.
func (mr *MockcmdMockRecorder) SetDir(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDir", reflect.TypeOf((*Mockcmd)(nil).SetDir), arg0)
}

// SetStderr mocks base method.
func (m *Mockcmd) SetStderr(arg0 io.Writer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStderr", arg0)
}

// SetStderr indicates an expected call of SetStderr.
func (mr *MockcmdMockRecorder) SetStderr(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStderr", reflect.TypeOf((*Mockcmd)(nil).SetStderr), arg0)
}

// SetStdin mocks base method.
func (m *Mockcmd) SetStdin(arg0 io.Reader) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStdin", arg0)
}

// SetStdin indicates an expected call of SetStdin.
func (mr *MockcmdMockRecorder) SetStdin(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStdin", reflect.TypeOf((*Mockcmd)(nil).SetStdin), arg0)
}

// SetStdout mocks base method.
func (m *Mockcmd) SetStdout(arg0 io.Writer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStdout", arg0)
}

// SetStdout indicates an expected call of SetStdout.
func (mr *MockcmdMockRecorder) SetStdout(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStdout", reflect.TypeOf((*Mockcmd)(nil).SetStdout), arg0)
}

// SetUser mocks base method.
func (m *Mockcmd) SetUser(user *User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUser", user)
}

// SetUser indicates an expected call of SetUser.
func (mr *MockcmdMockRecorder) SetUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*Mockcmd)(nil).SetUser), user)
}
