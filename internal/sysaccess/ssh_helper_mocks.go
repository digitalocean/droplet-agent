// Code generated by MockGen. DO NOT EDIT.
// Source: internal/sysaccess/ssh_helper.go
//
// Generated by this command:
//
//	mockgen -source=internal/sysaccess/ssh_helper.go -package=sysaccess -destination=internal/sysaccess/ssh_helper_mocks.go
//

// Package sysaccess is a generated GoMock package.
package sysaccess

import (
	reflect "reflect"

	sysutil "github.com/digitalocean/droplet-agent/internal/sysutil"
	fsnotify "github.com/fsnotify/fsnotify"
	gomock "go.uber.org/mock/gomock"
)

// MocksshHelper is a mock of sshHelper interface.
type MocksshHelper struct {
	ctrl     *gomock.Controller
	recorder *MocksshHelperMockRecorder
	isgomock struct{}
}

// MocksshHelperMockRecorder is the mock recorder for MocksshHelper.
type MocksshHelperMockRecorder struct {
	mock *MocksshHelper
}

// NewMocksshHelper creates a new mock instance.
func NewMocksshHelper(ctrl *gomock.Controller) *MocksshHelper {
	mock := &MocksshHelper{ctrl: ctrl}
	mock.recorder = &MocksshHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksshHelper) EXPECT() *MocksshHelperMockRecorder {
	return m.recorder
}

// areSameKeys mocks base method.
func (m *MocksshHelper) areSameKeys(keys1, keys2 []*SSHKey) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "areSameKeys", keys1, keys2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// areSameKeys indicates an expected call of areSameKeys.
func (mr *MocksshHelperMockRecorder) areSameKeys(keys1, keys2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "areSameKeys", reflect.TypeOf((*MocksshHelper)(nil).areSameKeys), keys1, keys2)
}

// authorizedKeysFile mocks base method.
func (m *MocksshHelper) authorizedKeysFile(user *sysutil.User) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "authorizedKeysFile", user)
	ret0, _ := ret[0].(string)
	return ret0
}

// authorizedKeysFile indicates an expected call of authorizedKeysFile.
func (mr *MocksshHelperMockRecorder) authorizedKeysFile(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "authorizedKeysFile", reflect.TypeOf((*MocksshHelper)(nil).authorizedKeysFile), user)
}

// newFSWatcher mocks base method.
func (m *MocksshHelper) newFSWatcher() (fsWatcher, <-chan fsnotify.Event, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "newFSWatcher")
	ret0, _ := ret[0].(fsWatcher)
	ret1, _ := ret[1].(<-chan fsnotify.Event)
	ret2, _ := ret[2].(<-chan error)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// newFSWatcher indicates an expected call of newFSWatcher.
func (mr *MocksshHelperMockRecorder) newFSWatcher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "newFSWatcher", reflect.TypeOf((*MocksshHelper)(nil).newFSWatcher))
}

// prepareAuthorizedKeys mocks base method.
func (m *MocksshHelper) prepareAuthorizedKeys(localKeys []string, managedKeys []*SSHKey) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "prepareAuthorizedKeys", localKeys, managedKeys)
	ret0, _ := ret[0].([]string)
	return ret0
}

// prepareAuthorizedKeys indicates an expected call of prepareAuthorizedKeys.
func (mr *MocksshHelperMockRecorder) prepareAuthorizedKeys(localKeys, managedKeys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "prepareAuthorizedKeys", reflect.TypeOf((*MocksshHelper)(nil).prepareAuthorizedKeys), localKeys, managedKeys)
}

// removeExpiredKeys mocks base method.
func (m *MocksshHelper) removeExpiredKeys(originalKeys map[string][]*SSHKey) map[string][]*SSHKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "removeExpiredKeys", originalKeys)
	ret0, _ := ret[0].(map[string][]*SSHKey)
	return ret0
}

// removeExpiredKeys indicates an expected call of removeExpiredKeys.
func (mr *MocksshHelperMockRecorder) removeExpiredKeys(originalKeys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "removeExpiredKeys", reflect.TypeOf((*MocksshHelper)(nil).removeExpiredKeys), originalKeys)
}

// sshdCfgModified mocks base method.
func (m *MocksshHelper) sshdCfgModified(w fsWatcher, sshdCfgFile string, ev *fsnotify.Event) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sshdCfgModified", w, sshdCfgFile, ev)
	ret0, _ := ret[0].(bool)
	return ret0
}

// sshdCfgModified indicates an expected call of sshdCfgModified.
func (mr *MocksshHelperMockRecorder) sshdCfgModified(w, sshdCfgFile, ev any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sshdCfgModified", reflect.TypeOf((*MocksshHelper)(nil).sshdCfgModified), w, sshdCfgFile, ev)
}

// sshdConfigFile mocks base method.
func (m *MocksshHelper) sshdConfigFile() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sshdConfigFile")
	ret0, _ := ret[0].(string)
	return ret0
}

// sshdConfigFile indicates an expected call of sshdConfigFile.
func (mr *MocksshHelperMockRecorder) sshdConfigFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sshdConfigFile", reflect.TypeOf((*MocksshHelper)(nil).sshdConfigFile))
}

// validateKey mocks base method.
func (m *MocksshHelper) validateKey(k *SSHKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "validateKey", k)
	ret0, _ := ret[0].(error)
	return ret0
}

// validateKey indicates an expected call of validateKey.
func (mr *MocksshHelperMockRecorder) validateKey(k any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "validateKey", reflect.TypeOf((*MocksshHelper)(nil).validateKey), k)
}

// MockfsWatcher is a mock of fsWatcher interface.
type MockfsWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockfsWatcherMockRecorder
	isgomock struct{}
}

// MockfsWatcherMockRecorder is the mock recorder for MockfsWatcher.
type MockfsWatcherMockRecorder struct {
	mock *MockfsWatcher
}

// NewMockfsWatcher creates a new mock instance.
func NewMockfsWatcher(ctrl *gomock.Controller) *MockfsWatcher {
	mock := &MockfsWatcher{ctrl: ctrl}
	mock.recorder = &MockfsWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfsWatcher) EXPECT() *MockfsWatcherMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockfsWatcher) Add(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockfsWatcherMockRecorder) Add(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockfsWatcher)(nil).Add), name)
}

// Close mocks base method.
func (m *MockfsWatcher) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockfsWatcherMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockfsWatcher)(nil).Close))
}

// Remove mocks base method.
func (m *MockfsWatcher) Remove(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockfsWatcherMockRecorder) Remove(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockfsWatcher)(nil).Remove), name)
}
